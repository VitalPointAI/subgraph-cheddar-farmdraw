type Account @entity {
  id: ID!
  signerId: String!
  withdrawCrop: [WithdrawCrop!]!
  transfers: [Transfer!]!
}

type WithdrawCrop @entity {
  id: ID!
  output: String
  action: String
  amount: BigInt
  blockTime: BigInt
  blockHeight: BigInt
  blockHash: String
  token: String
  receiverId: String
  memo: String
}
type Transfer @entity {
  id: ID!
  output: String
  action: String
  amount: BigInt
  transferFrom: String
  transferTo: String
  memo: String
  blockTime: BigInt
  blockHeight: BigInt
  blockHash: String
}
# type Swap @entity {
#   id: ID!
#   output: String
#   action: String
#   blocktime: BigInt
#   firstTokenAmount: BigInt
#   firstToken: String
#   secondTokenAmount: BigInt
#   secondToken: String
# }

# type AddLiquidity @entity {
#   id: ID!
#   output: String
#   blocktime: BigInt
#   functionCalled: String
#   functionAction: String
#   firstPoolAmount: BigInt
#   firstPool: String
#   secondPoolAmount: BigInt
#   secondPool: String
#   sharesMinted: BigInt
# }